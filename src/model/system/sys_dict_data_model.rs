// Code generated by https://github.com/feihua/code_cli
// author：刘飞华
// createTime：2024/12/25 10:01:11

use crate::vo::system::sys_dict_data_vo::{DictDataReq, DictDataResp, QueryDictDataListReq};
use rbatis::rbdc::datetime::DateTime;
use rbatis::RBatis;
use serde::{Deserialize, Serialize};
/*
 *字典数据表
 *author：刘飞华
 *date：2024/12/25 10:01:11
 */
#[derive(Clone, Debug, Serialize, Deserialize)]
pub struct DictData {
    pub id: Option<i64>,               //字典编码
    pub dict_sort: i32,                //字典排序
    pub dict_label: String,            //字典标签
    pub dict_value: String,            //字典键值
    pub dict_type: String,             //字典类型
    pub css_class: String,             //样式属性（其他样式扩展）
    pub list_class: String,            //表格回显样式
    pub is_default: String,            //是否默认（Y是 N否）
    pub status: i8,                    //状态（0：停用，1:正常）
    pub remark: Option<String>,        //备注
    pub create_time: Option<DateTime>, //创建时间
    pub update_time: Option<DateTime>, //修改时间
}

/*
 *字典数据表基本操作
 *author：刘飞华
 *date：2024/12/25 10:01:11
 */
rbatis::crud!(DictData {}, "sys_dict_data");

impl From<DictDataReq> for DictData {
    fn from(item: DictDataReq) -> Self {
        let mut model = DictData {
            id: item.id,                 //字典编码
            dict_sort: item.dict_sort,   //字典排序
            dict_label: item.dict_label, //字典标签
            dict_value: item.dict_value, //字典键值
            dict_type: item.dict_type,   //字典类型
            css_class: item.css_class,   //样式属性（其他样式扩展）
            list_class: item.list_class, //格回显样式
            is_default: item.is_default, //是否默认（Y是 N否）
            status: item.status,         //状态（0：停用，1:正常）
            remark: item.remark,         //备注
            create_time: None,           //创建时间
            update_time: None,           //修改时间
        };
        if let None = item.id {
            model.create_time = Some(DateTime::now());
        } else {
            model.update_time = Some(DateTime::now());
        }
        model
    }
}

impl Into<DictDataResp> for DictData {
    fn into(self) -> DictDataResp {
        DictDataResp {
            id: self.id,                   //字典编码
            dict_sort: self.dict_sort,     //字典排序
            dict_label: self.dict_label,   //字典标签
            dict_value: self.dict_value,   //字典键值
            dict_type: self.dict_type,     //字典类型
            css_class: self.css_class,     //样式属性（其他样式扩展）
            list_class: self.list_class,   //格回显样式
            is_default: self.is_default,   //是否默认（Y是 N否）
            status: self.status,           //状态（0：停用，1:正常）
            remark: self.remark,           //备注
            create_time: self.create_time, //创建时间
            update_time: self.update_time, //修改时间
        }
    }
}

/*
 *根据id查询字典数据表
 *author：刘飞华
 *date：2024/12/25 10:01:11
 */
impl_select!(DictData{select_by_id(id:&i64) -> Option => "`where id = #{id} limit 1`"}, "sys_dict_data");

/*
 *根据dict_type和dict_label查询字典数据表
 *author：刘飞华
 *date：2024/12/25 10:01:11
 */
impl_select!(DictData{select_by_dict_label(dict_type:&str, dict_label:&str) -> Option => "`where dict_type = #{dict_type} and dict_label = #{dict_label}`"}, "sys_dict_data");

/*
 *根据dict_type和dict_value查询字典数据表
 *author：刘飞华
 *date：2024/12/25 10:01:11
 */
impl_select!(DictData{select_by_dict_value(dict_type:&str, dict_value:&str) -> Option => "`where dict_type = #{dict_type} and dict_value = #{dict_value}`"}, "sys_dict_data");

/*
 *分页查询字典数据表
 *author：刘飞华
 *date：2024/12/25 10:01:11
 */
impl_select_page!(DictData{select_page() =>"
     if !sql.contains('count'):
       order by create_time desc"
},"sys_dict_data");

/*
 *根据条件分页查询字典数据表
 *author：刘飞华
 *date：2024/12/25 10:01:11
 */
impl_select_page!(DictData{select_dict_data_list(req:&QueryDictDataListReq) =>"
    where 1=1
     if req.dictLabel != null && req.dictLabel != '':
      ` and dict_label like concat('%', #{req.dictLabel}, '%') `
     if req.dictType != null && req.dictType != '':
      ` and dict_type like concat('%', #{req.dictType}, '%') `
     if req.status != 2:
      ` and status = #{req.status} `
     if !sql.contains('count'):
      ` order by create_time desc"
},"sys_dict_data");

/*
 *同步修改字典类型
 *author：刘飞华
 *date：2024/12/25 10:01:11
 */
#[sql("update sys_dict_data set dict_type = ? where dict_type = ?")]
pub async fn update_dict_data_type(rb: &RBatis, new_dict_type: &str, old_dict_type: &str) -> Option<i64> {
    impled!()
}

/*
 *查询字典数据
 *author：刘飞华
 *date：2024/12/25 10:01:11
 */
#[sql("select count(1) from sys_dict_data where dict_type= ?")]
pub async fn count_dict_data_by_type(rb: &RBatis, dict_type: &str) -> rbatis::Result<i64> {
    impled!()
}

// Code generated by https://github.com/feihua/code_cli
// author：刘飞华
// createTime：2024/12/25 10:01:11

use crate::vo::system::sys_login_log_vo::{LoginLogResp, QueryLoginLogListReq};
use rbatis::rbdc::datetime::DateTime;
use rbatis::RBatis;
use serde::{Deserialize, Serialize};
/*
 *系统访问记录
 *author：刘飞华
 *date：2024/12/25 10:01:11
 */
#[derive(Clone, Debug, Serialize, Deserialize)]
pub struct LoginLog {
    pub id: Option<i64>,              //访问ID
    pub login_name: String,           //登录账号
    pub ipaddr: String,               //登录IP地址
    pub login_location: String,       //登录地点
    pub platform: String,             //平台信息
    pub browser: String,              //浏览器类型
    pub version: String,              //浏览器版本
    pub os: String,                   //操作系统
    pub arch: String,                 //体系结构信息
    pub engine: String,               //渲染引擎信息
    pub engine_details: String,       //渲染引擎详细信息
    pub extra: String,                //其他信息（可选）
    pub status: i8,                   //登录状态(0:失败,1:成功)
    pub msg: String,                  //提示消息
    pub login_time: Option<DateTime>, //访问时间
}

/*
 *系统访问记录基本操作
 *author：刘飞华
 *date：2024/12/25 10:01:11
 */
rbatis::crud!(LoginLog {}, "sys_login_log");

impl Into<LoginLogResp> for LoginLog {
    fn into(self) -> LoginLogResp {
        LoginLogResp {
            id: self.id,                         //访问ID
            login_name: self.login_name,         //登录账号
            ipaddr: self.ipaddr,                 //登录IP地址
            login_location: self.login_location, //登录地点
            platform: self.platform,             //平台信息
            browser: self.browser,               //浏览器类型
            version: self.version,               //浏览器版本
            os: self.os,                         //操作系统
            arch: self.arch,                     //体系结构信息
            engine: self.engine,                 //渲染引擎信息
            engine_details: self.engine_details, //渲染引擎详细信息
            extra: self.extra,                   //其他信息（可选）
            status: self.status,                 //登录状态(0:失败,1:成功)
            msg: self.msg,                       //提示消息
            login_time: self.login_time,         //访问时间
        }
    }
}

/*
 *根据id查询系统访问记录
 *author：刘飞华
 *date：2024/12/25 10:01:11
 */
impl_select!(LoginLog{select_by_id(id:&i64) -> Option => "`where id = #{id} limit 1`"}, "sys_login_log");

/*
 *分页查询系统访问记录
 *author：刘飞华
 *date：2024/12/25 10:01:11
 */
impl_select_page!(LoginLog{select_page() =>"
     if !sql.contains('count'):
       order by login_time desc"
},"sys_login_log");

/*
 *根据条件分页查询系统访问记录
 *author：刘飞华
 *date：2024/12/25 10:01:11
 */
impl_select_page!(LoginLog{select_login_log_list(req:&QueryLoginLogListReq) =>"
    where 1=1
     if req.loginName != '' && req.loginName != null:
       ` and login_name like concat('%', #{req.loginName}, '%') `
     if req.ipaddr != '' && req.ipaddr != null:
       ` and ipaddr like concat('%', #{req.ipaddr}, '%') `
     if req.browser != '' && req.browser != null:
       ` and browser like concat('%', #{req.browser}, '%') `
     if req.os != '' && req.os != null:
       ` and os like concat('%', #{req.os}, '%') `
     if req.status != 2:
       ` and status = #{req.status} `
     if !sql.contains('count'):
       ` order by login_time desc `"
},"sys_login_log");

/*
 *清空系统登录日志
 *author：刘飞华
 *date：2024/12/12 14:41:44
 */
#[sql("truncate table sys_login_log")]
pub async fn clean_login_log(rb: &RBatis) -> Option<i64> {
    impled!()
}

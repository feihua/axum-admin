// Code generated by https://github.com/feihua/code_cli
// author：刘飞华
// createTime：2024/12/25 10:01:11

use crate::vo::system::sys_dict_type_vo::{DictTypeReq, DictTypeResp, QueryDictTypeListReq};
use rbatis::rbdc::datetime::DateTime;
use serde::{Deserialize, Serialize};
/*
 *字典类型
 *author：刘飞华
 *date：2024/12/25 10:01:11
 */
#[derive(Clone, Debug, Serialize, Deserialize)]
pub struct DictType {
    pub id: Option<i64>,               //字典主键
    pub dict_name: String,             //字典名称
    pub dict_type: String,             //字典类型
    pub status: i8,                    //状态（0：停用，1:正常）
    pub remark: Option<String>,        //备注
    pub create_time: Option<DateTime>, //创建时间
    pub update_time: Option<DateTime>, //修改时间
}

/*
 *字典类型基本操作
 *author：刘飞华
 *date：2024/12/25 10:01:11
 */
rbatis::crud!(DictType {}, "sys_dict_type");

impl From<DictTypeReq> for DictType {
    fn from(item: DictTypeReq) -> Self {
        let mut model = DictType {
            id: item.id,               //字典主键
            dict_name: item.dict_name, //字典名称
            dict_type: item.dict_type, //字典类型
            status: item.status,       //状态（0：停用，1:正常）
            remark: item.remark,       //备注
            create_time: None,         //创建时间
            update_time: None,         //修改时间
        };
        if let None = item.id {
            model.create_time = Some(DateTime::now());
        } else {
            model.update_time = Some(DateTime::now());
        }
        model
    }
}

impl Into<DictTypeResp> for DictType {
    fn into(self) -> DictTypeResp {
        DictTypeResp {
            id: self.id,                   //字典主键
            dict_name: self.dict_name,     //字典名称
            dict_type: self.dict_type,     //字典类型
            status: self.status,           //状态（0：停用，1:正常）
            remark: self.remark,           //备注
            create_time: self.create_time, //创建时间
            update_time: self.update_time, //修改时间
        }
    }
}

/*
 *根据id查询字典类型
 *author：刘飞华
 *date：2024/12/25 10:01:11
 */
impl_select!(DictType{select_by_id(id:&i64) -> Option => "`where id = #{id} limit 1`"}, "sys_dict_type");

/*
 *根据dict_type查询字典类型
 *author：刘飞华
 *date：2024/12/25 10:01:11
 */
impl_select!(DictType{select_by_dict_type(dict_type:&str) -> Option => "`where dict_type = #{dict_type} limit 1`"}, "sys_dict_type");

/*
 *分页查询字典类型
 *author：刘飞华
 *date：2024/12/25 10:01:11
 */
impl_select_page!(DictType{select_page() =>"
     if !sql.contains('count'):
       order by create_time desc"
},"sys_dict_type");

/*
 *根据条件分页查询字典类型
 *author：刘飞华
 *date：2024/12/25 10:01:11
 */
impl_select_page!(DictType{select_dict_type_list(req:&QueryDictTypeListReq) =>"
    where 1=1
     if req.dictName != null && req.dictName != '':
      ` and dict_name like concat('%', #{req.dictName}, '%') `
     if req.dictType != null && req.dictType != '':
      ` and dict_type like concat('%', #{req.dictType}, '%') `
     if req.status != 2:
      ` and status = #{req.status} `
     if !sql.contains('count'):
      ` order by create_time desc"
},"sys_dict_type");
